{"version":3,"sources":["Component/TableCell.jsx","Component/TableRow.jsx","Component/Table.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TableCell","props","style","backgroundColor","bgcolor","TableRow","row","rowIndex","click","map","columnIndex","color","onClick","Table","table","onCellClick","index","colors","buttons","length","concat","_","slice","r","c","App","state","handleButton","bind","handleSelect","handleCellClick","column","this","setState","i","k","e","target","name","value","Object","keys","text","onChange","toLowerCase","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61d1c9bf.chunk.js","sourcesContent":["const TableCell = (props) => \n{\n    return(\n        <td {...props} style={{backgroundColor: `${props.bgcolor}`}}></td>\n    )\n}\n\n\nexport default TableCell\n","import TableCell from './TableCell'\n\nconst TableRow = ({ row, rowIndex, click }) => (\n    <tr>\n        { row.map(({ color }, columnIndex) => <TableCell bgcolor={color} key={`${rowIndex}${columnIndex}`} onClick={() => click(rowIndex, columnIndex)} />)}\n    </tr>\n)\n\nexport default TableRow\n","import TableRow from './TableRow'\n\nconst Table = ({ table, onCellClick }) => (\n    <table>\n        { table.map((row, index) => <TableRow click={onCellClick} key={index} rowIndex={index} row={row} />) }\n    </table>\n)\n\nexport default Table","import {Component} from 'react'\nimport Table from './Component/Table'\nimport './App.css';\n\nconst colors = ['Red', 'Green', 'Blue']\n\nconst buttons = {\n  'Add Column': ({ table, color }) => ({ \n    table: table.length === 0 \n        ? [ [ { color } ] ] \n        : table.map(row => ([...row, { color }]))\n  }),\n  'Add Row': ({ table, color }) => ({\n    table: table.length === 0\n        ? [ [ { color } ] ]\n        :  table.concat([ table[0].map(_ => ({ color })) ]) \n  }),\n  'Remove Column': ({ table }) => ({\n    table: table.length < 1 || table[0].length <= 1 \n        ? []\n        : table.map(row => row.slice(0, row.length - 1))\n  }),\n  'Remove Row': ({ table }) => ({\n    table: table.length < 1\n        ? []\n        : table.slice(0, table.length - 1)\n  }),\n  'Clear Colors': ({ table }) => ({\n    table: table.map(r => r.map(_ => ({ color: '' })))\n  }),\n  'Fill All': ({ table, color }) => ({\n    table: table.map(r => r.map(_ => ({ color })))\n  }),\n  'Fill All Uncolored': ({ table, color }) => ({\n    table: table.map(r => r.map(c => c.color === '' ? ({ color }) : c))\n  })\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      table: [],  // [ rows: [ columns: [ cells: { color } ] ] ]\n      color: ''\n    }\n    this.handleButton = this.handleButton.bind(this)\n    this.handleSelect = this.handleSelect.bind(this)\n    this.handleCellClick = this.handleCellClick.bind(this)\n  }\n\n  handleCellClick(row, column) {\n    this.setState(({ table, color }) => ({ \n      table: table.map((r, i) => i !== row ? r : r.map((c, k) => k !== column ? c : ({ color })))\n    }))\n  }\n\n  handleButton(e) {\n    this.setState(buttons[e.target.name])\n  }\n\n  handleSelect(e) {\n    this.setState({ color: e.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        { Object.keys(buttons).map(text => <button onClick={this.handleButton} key={text} name={text}>{text}</button>) }\n        <select name=\"Select Color\" value={this.state.color} onChange={this.handleSelect}>\n          <option value=\"\">Select</option>\n          { colors.map(color => <option value={color.toLowerCase()} key={color}>{color}</option>) }\n        </select>\n        <Table table={this.state.table} onCellClick={this.handleCellClick} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}